import pandas as pd
import numpy as np
import backtrader as bt
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
from binance.client import Client
from ta.trend import MACD
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands
from statistics import stdev
from dash import dash_table
from datetime import datetime


idx = datetime.now()

api_key = 'YOUR API KEY'
api_secret = 'YOUR API SECRET'

client = Client(api_key, api_secret)

exchange_info = client.get_exchange_info()
symbols = [s['symbol'] for s in exchange_info['symbols'] if s['status'] == 'TRADING']

def get_candlestick_data(coin, time_interval):
    try:
        candles = client.get_klines(symbol=coin, interval=time_interval)
        columns = ['open_time', 'open', 'high', 'low', 'close', 'volume', 'close_time',
                   'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume',
                   'taker_buy_quote_asset_volume', 'ignore']
        df = pd.DataFrame(candles, columns=columns)
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = df[col].astype(float)
        df['date'] = pd.to_datetime(df['open_time'], unit='ms')
        df.set_index('date', inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching candlestick data: {e}")
        return pd.DataFrame()


def heikin_ashi(o, h, l, c):
    close = (o + h + l + c) / 4
    open_price = (o.shift(1) + c.shift(1)) / 2
    high = np.maximum(h, np.maximum(open_price, close))
    low = np.minimum(l, np.minimum(open_price, close))
    return open_price, high, low, close

def sma(series, length):
    return series.rolling(window=length).mean()

def ema(series, length):
    return series.ewm(span=length, adjust=False).mean()

def smma(values, period):
    smma = [np.nan] * len(values)
    smma[period - 1] = np.mean(values[:period])
    for i in range(period, len(values)):
        smma[i] = (smma[i - 1] * (period - 1) + values[i]) / period
    smma = pd.Series(smma, index=values.index if isinstance(values, pd.Series) else None)
    return smma

def rma(series, length=None):
    length = int(length) if length and length > 0 else 10
    alpha = (1.0 / length) if length > 0 else 0.5
    rma = series.ewm(alpha=alpha, min_periods=length).mean()
    return rma

def kama(series, length=21, fast_end=0.666, slow_end=0.0645, offset=None):
    length = int(length) if length and length > 0 else 21
    fast_end = float(fast_end) if fast_end else 0.666
    slow_end = float(slow_end) if slow_end else 0.0645
    offset = int(offset) if offset else 0
    price_diff = series.diff(1).abs()
    signal = series.diff(length).abs()
    noise = price_diff.rolling(window=length).sum()
    er = signal / noise
    er.replace([np.inf, -np.inf], 0, inplace=True)
    sc = (er * (fast_end - slow_end) + slow_end) ** 2
    kama = pd.Series(np.zeros(len(series)), index=series.index)
    kama.iloc[length - 1] = series.iloc[length - 1]
    for i in range(length, len(series)):
        kama.iloc[i] = kama.iloc[i - 1] + sc.iloc[i] * (series.iloc[i] - kama.iloc[i - 1])
    if offset != 0:
        kama = kama.shift(offset)
    return kama

def alma(series, window=20, sigma=6, offset=0.85):
    m = (window - 1) * offset
    s = window / sigma
    def gaussian_weight(x, m, s):
        return np.exp(-((x - m) ** 2) / (2 * s ** 2))
    weights = np.array([gaussian_weight(i, m, s) for i in range(window)])
    weights /= np.sum(weights)
    alma = series.rolling(window=window).apply(lambda x: np.dot(x, weights), raw=True)
    return alma

def wma(series, length):
    weights = np.arange(1, length + 1)
    return series.rolling(length).apply(lambda prices: np.dot(prices, weights) / weights.sum(), raw=True)

def salma(series, length=10, smooth=3, mult=0.3, sd_len=5):
    baseline = wma(series, sd_len)
    dev = mult * stdev(series[-sd_len:])
    upper = baseline + dev
    lower = baseline - dev
    cprice = np.where(series > upper, upper, np.where(series < lower, lower, series))
    cprice = pd.Series(cprice)
    salma = wma(wma(cprice, length), smooth)
    return salma

def hull_ma(series, length=9):
    half_length = int(length / 2)
    wma_half = wma(series, half_length)
    wma_full = wma(series, length)
    raw_hma = 2 * wma_half - wma_full
    hma = wma(raw_hma, int(np.sqrt(length)))
    return hma

def xsa(src, length, weight):
    sumf = np.zeros_like(src)
    ma = np.zeros_like(src)
    xsa = np.zeros_like(src)
    for i in range(length, len(src)):
        sumf[i] = np.nan_to_num(sumf[i - 1]) - np.nan_to_num(src[i - length]) + src[i]
        ma[i] = np.nan if np.isnan(src[i - length]) else sumf[i] / length
        xsa[i] = ma[i] if np.isnan(xsa[i - 1]) else (src[i] * weight + xsa[i - 1] * (length - weight)) / length
    return xsa

def relative_volume(series, length=10, offset=None):
    length = int(length) if length and length > 0 else 10
    alpha = (1.0 / length) if length > 0 else 0.5
    rv = series.ewm(alpha=alpha, min_periods=length).mean()
    rv = series / (rv+0.0001)
    return rv

def vwap(high, low, close, volume):
    length=1
    tp = (high + low + close) / 3
    vwap = (tp * volume).rolling(window=length).sum() / volume.rolling(window=length).sum()
    return vwap

def hlc3(high, low, close):
    hlc3 = (high + low + close) / 3
    return hlc3

def mfi(high, low, close, volume, window=14):
    typical_price = (high + low + close) / 3
    money_flow = typical_price * volume
    positive_money_flow = (money_flow * (close > close.shift(1))).rolling(window=window).sum()
    negative_money_flow = (money_flow * (close < close.shift(1))).rolling(window=window).sum()
    money_ratio = positive_money_flow / negative_money_flow
    mfi = 100 - (100 / (1 + money_ratio))
    return mfi

def cmf(high, low, close, volume, length=20):
    money_flow_multiplier = ((close - low) - (high - close)) / (high - low)
    money_flow_volume = money_flow_multiplier * volume
    cmf = money_flow_volume.rolling(window=length).sum() / volume.rolling(window=length).sum()
    return cmf

def williams_r(high, low, close, window=14):
    highest_high = high.rolling(window=window).max()
    lowest_low = low.rolling(window=window).min()
    williams_r = -100 * (highest_high - close) / (highest_high - lowest_low)
    return williams_r

def momentum(close, window=14):
    momentum = close.diff(window)
    return momentum

def obv(close, volume):
    obv = pd.Series(index=close.index)
    obv.iloc[0] = volume.iloc[0]
    for i in range(1, len(close)):
        if close.iloc[i] > close.iloc[i - 1]:
            obv.iloc[i] = obv.iloc[i - 1] + volume.iloc[i]
        elif close.iloc[i] < close.iloc[i - 1]:
            obv.iloc[i] = obv.iloc[i - 1] - volume.iloc[i]
        else:
            obv.iloc[i] = obv.iloc[i - 1]
    return obv

def rsi(series, length=14):
    scalar = 100
    drift = 1
    negative = series.diff(drift)
    positive = negative.copy()
    positive[positive < 0] = 0
    negative[negative > 0] = 0
    positive_avg = rma(positive, length=length)
    negative_avg = rma(negative, length=length)
    rsi = scalar * positive_avg / (positive_avg + negative_avg.abs())
    return rsi

def cci(high, low, close, window=20, constant=0.015):
    typical_price = (high + low + close) / 3
    mean_deviation = typical_price.rolling(window=window).apply(lambda x: np.mean(np.abs(x - np.mean(x))))
    cci = (typical_price - typical_price.rolling(window=window).mean()) / (constant * mean_deviation)
    return cci

def psar(high, low, close, initial_af=0.02, step_af=0.02, max_af=0.2):
    psar = pd.Series(index=high.index)
    psar[0] = close[0]
    uptrend = True
    af = initial_af
    ep = high[0]
    for i in range(1, len(high)):
        if uptrend:
            psar[i] = psar[i-1] + af * (ep - psar[i-1])
            if low[i] < psar[i]:
                uptrend = False
                psar[i] = ep
                af = initial_af
                ep = low[i]
            else:
                if high[i] > ep:
                    ep = high[i]
                    af = min(af + step_af, max_af)
        else:
            psar[i] = psar[i-1] + af * (ep - psar[i-1])
            if high[i] > psar[i]:
                uptrend = True
                psar[i] = ep
                af = initial_af
                ep = high[i]
            else:
                if low[i] < ep:
                    ep = low[i]
                    af = min(af + step_af, max_af)
    return psar

def lpsar(high, low, close, initial_af=0.02, step_af=0.02, max_af=0.2):
    lpsar = pd.Series(index=high.index)
    lpsar[0] = close[0]
    uptrend = True
    af = initial_af
    ep = high[0]
    for i in range(1, len(high)):
        previous_lpsar = lpsar[i - 1]
        previous_high = high[i - 1]
        previous_low = low[i - 1]
        if uptrend:
            lpsar[i] = previous_lpsar + af * (ep - previous_lpsar)
            if low[i] < lpsar[i]:
                uptrend = False
                lpsar[i] = ep
                af = initial_af
                ep = low[i]
            else:
                if high[i] > ep:
                    ep = high[i]
                    af = min(af + step_af, max_af)
                lpsar[i] = min(lpsar[i], previous_low, low[i])
        else:
            lpsar[i] = previous_lpsar + af * (ep - previous_lpsar)
            if high[i] > lpsar[i]:
                uptrend = True
                lpsar[i] = ep
                af = initial_af
                ep = high[i]
            else:
                if low[i] < ep:
                    ep = low[i]
                    af = min(af + step_af, max_af)
                lpsar[i] = max(lpsar[i], previous_high, high[i])
    return lpsar

def tr(high, low, close):
    tr1 = high - low
    tr2 = abs(high - close.shift(1))
    tr3 = abs(low - close.shift(1))
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
    return tr

def plot_signals(df, signals):
    fig = go.Figure(data=[go.Candlestick(x=df.index,
                                         open=df['open'],
                                         high=df['high'],
                                         low=df['low'],
                                         close=df['close'],
                                         name='Candlesticks')])
    
    # RSI sinyalleri
    fig.add_trace(go.Scatter(x=signals['rsi_buy'].index, y=df['close'][signals['rsi_buy'].index], mode='markers', marker=dict(color='green', symbol='triangle-up'), name='RSI Buy Signal'))
    fig.add_trace(go.Scatter(x=signals['rsi_sell'].index, y=df['close'][signals['rsi_sell'].index], mode='markers', marker=dict(color='red', symbol='triangle-down'), name='RSI Sell Signal'))
    
    # MACD sinyalleri
    fig.add_trace(go.Scatter(x=signals['macd_buy'].index, y=df['close'][signals['macd_buy'].index], mode='markers', marker=dict(color='blue', symbol='triangle-up'), name='MACD Buy Signal'))
    fig.add_trace(go.Scatter(x=signals['macd_sell'].index, y=df['close'][signals['macd_sell'].index], mode='markers', marker=dict(color='orange', symbol='triangle-down'), name='MACD Sell Signal'))
    
    # Bollinger Bands sinyalleri
    fig.add_trace(go.Scatter(x=signals['bb_buy'].index, y=df['close'][signals['bb_buy'].index], mode='markers', marker=dict(color='purple', symbol='triangle-up'), name='BB Buy Signal'))
    fig.add_trace(go.Scatter(x=signals['bb_sell'].index, y=df['close'][signals['bb_sell'].index], mode='markers', marker=dict(color='pink', symbol='triangle-down'), name='BB Sell Signal'))
    
    # PSAR sinyalleri
    fig.add_trace(go.Scatter(x=signals['psar_buy'].index, y=df['close'][signals['psar_buy'].index], mode='markers', marker=dict(color='cyan', symbol='triangle-up'), name='PSAR Buy Signal'))
    fig.add_trace(go.Scatter(x=signals['psar_sell'].index, y=df['close'][signals['psar_sell'].index], mode='markers', marker=dict(color='magenta', symbol='triangle-down'), name='PSAR Sell Signal'))
    
    # CCI sinyalleri
    fig.add_trace(go.Scatter(x=signals['cci_buy'].index, y=df['close'][signals['cci_buy'].index], mode='markers', marker=dict(color='yellow', symbol='triangle-up'), name='CCI Buy Signal'))
    fig.add_trace(go.Scatter(x=signals['cci_sell'].index, y=df['close'][signals['cci_sell'].index], mode='markers', marker=dict(color='brown', symbol='triangle-down'), name='CCI Sell Signal'))
    
    fig.update_layout(title='Trading Signals', xaxis_title='Date', yaxis_title='Price')
    return fig

def generate_signals(df):
    signals = {}
    
    # RSI sinyalleri
    rsi_values = rsi(df['close'])
    signals['rsi_buy'] = rsi_values[rsi_values < 30]
    signals['rsi_sell'] = rsi_values[rsi_values > 70]
    
    # MACD sinyalleri
    macd = MACD(df['close'])
    signals['macd_buy'] = macd.macd_diff()[macd.macd_diff() > 0]
    signals['macd_sell'] = macd.macd_diff()[macd.macd_diff() < 0]
    
    # Bollinger Bands sinyalleri
    bb = BollingerBands(df['close'])
    signals['bb_buy'] = df['close'][df['close'] < bb.bollinger_lband()]
    signals['bb_sell'] = df['close'][df['close'] > bb.bollinger_hband()]
    
    # PSAR sinyalleri
    psar_values = psar(df['high'], df['low'], df['close'])
    signals['psar_buy'] = df['close'][df['close'] > psar_values]
    signals['psar_sell'] = df['close'][df['close'] < psar_values]
    
    # CCI sinyalleri
    cci_values = cci(df['high'], df['low'], df['close'])
    signals['cci_buy'] = cci_values[cci_values < -100]
    signals['cci_sell'] = cci_values[cci_values > 100]
    
    return signals

def cci(high, low, close, window=20, constant=0.015):
    typical_price = (high + low + close) / 3
    mean_deviation = typical_price.rolling(window=window).apply(lambda x: np.mean(np.abs(x - np.mean(x))))
    cci = (typical_price - typical_price.rolling(window=window).mean()) / (constant * mean_deviation)
    return cci

def rsi(series, length=14):
    scalar = 100
    drift = 1
    negative = series.diff(drift)
    positive = negative.copy()
    positive[positive < 0] = 0
    negative[negative > 0] = 0
    positive_avg = rma(positive, length=length)
    negative_avg = rma(negative, length=length)
    rsi = scalar * positive_avg / (positive_avg + negative_avg.abs())
    return rsi

def rma(series, length=None):
    length = int(length) if length and length > 0 else 10
    alpha = (1.0 / length) if length > 0 else 0.5
    rma = series.ewm(alpha=alpha, min_periods=length).mean()
    return rma
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("Cryptocurrency Trading Dashboard"),
    dcc.Dropdown(id='coin-dropdown', options=[{'label': s, 'value': s} for s in symbols], value='BTCUSDT'),dcc.Dropdown(id='interval-dropdown', options=[
        {'label': '1 Minute', 'value': '1m'},
        {'label': '5 Minutes', 'value': '5m'},
        {'label': '15 Minutes', 'value': '15m'},
        {'label': '30 Minutes', 'value': '30m'},
        {'label': '1 Hour', 'value': '1h'},
        {'label': '4 Hours', 'value': '4h'},
        {'label': '1 Day', 'value': '1d'}
    ], value='1h'),
    dcc.Graph(id='candlestick-chart'),
    dash_table.DataTable(
        id='live-data-table',
        columns=[
            {'name': 'Coin', 'id': 'coin'},
            {'name': 'Price', 'id': 'price'},
            {'name': 'Date', 'id': 'date'},
            {'name': 'Indicator', 'id': 'indicator'},
            {'name': 'Signal', 'id': 'signal'}
        ],
        data=[],
        style_table={'overflowX': 'auto'}
    ),
    dcc.Interval(
        id='interval-component',
        interval=60*1000,  # in milliseconds
        n_intervals=0
    )
])

@app.callback(
    [Output('candlestick-chart', 'figure'), Output('live-data-table', 'data')],
    [Input('coin-dropdown', 'value'), Input('interval-dropdown', 'value'), Input('interval-component', 'n_intervals')]
)
def update_chart_and_table(coin, interval, n_intervals):
    df = get_candlestick_data(coin, interval)
    if df.empty:
        return go.Figure(), []
    
    signals = generate_signals(df)
    fig = plot_signals(df, signals)
    fig.update_layout(
        width=1366,
        height=768
    )
    
    
    table_data = []

    for indicator, signal_series in signals.items():
        for idx in signal_series.dropna().index:
        
            formattedDatetime = idx.strftime("%Y-%m-%d %H:%M:%S")
            table_data.append({
            'coin': coin,
            'price': df['close'].loc[idx],
            'indicator': indicator,
            'signal': 'Buy' if 'buy' in indicator else 'Sell',
            'date': formattedDatetime 
        })


   
    return fig, table_data

if __name__ == '__main__':
    app.run_server(debug=True)
